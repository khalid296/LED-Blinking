
LED Blinking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079a  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d0  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000360  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034b  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000203  00000000  00000000  000016a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	//PA0, PA1 are +, - to select led form 1 to 8
	//PA2, PA3 are +, - to select number of blinks off the led
	//PA4 to start
	char led=0,blinks=0,i;

	BUTTON_CTRL_PORT_DIR &=0xE0;	//Configure first 5 pins of Port A as input for 4 Push buttons and start
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	80 7e       	andi	r24, 0xE0	; 224
  70:	8a bb       	out	0x1a, r24	; 26
	LED_CTRL_PORT_DIR |=0xFF;	//Configure Port B as output for 8 LEDs
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	87 bb       	out	0x17, r24	; 23
	SEG_CTRL_PORT_DIR |=0xFF;	//Configure Port B as output for 2 7-Segment
  78:	94 b3       	in	r25, 0x14	; 20
  7a:	84 bb       	out	0x14, r24	; 20

	BUTTON_CTRL_PORT_OUT |=0x1F;	//Enable internal pull up resistors for buttons
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	8f 61       	ori	r24, 0x1F	; 31
  80:	8b bb       	out	0x1b, r24	; 27
	LED_CTRL_PORT_OUT &=0x00;	//Initialize LEDs to OFF
  82:	88 b3       	in	r24, 0x18	; 24
  84:	18 ba       	out	0x18, r1	; 24
	SEG_CTRL_PORT_OUT &=0x00;	//Initialize 7-segment to 0
  86:	85 b3       	in	r24, 0x15	; 21
  88:	15 ba       	out	0x15, r1	; 21

void main(){
	//PA0, PA1 are +, - to select led form 1 to 8
	//PA2, PA3 are +, - to select number of blinks off the led
	//PA4 to start
	char led=0,blinks=0,i;
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
			//Second check due to switch bouncing
			if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA4))
			{
				//Loop to toggle led according to blinks
				for(i=0;i<2*blinks;i++){
					LED_CTRL_PORT_OUT ^= (1<<led); // Toggle LED
  8e:	51 e0       	ldi	r21, 0x01	; 1
	BUTTON_CTRL_PORT_OUT |=0x1F;	//Enable internal pull up resistors for buttons
	LED_CTRL_PORT_OUT &=0x00;	//Initialize LEDs to OFF
	SEG_CTRL_PORT_OUT &=0x00;	//Initialize 7-segment to 0

	while(1){
		if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA0)){
  90:	c8 99       	sbic	0x19, 0	; 25
  92:	0e c0       	rjmp	.+28     	; 0xb0 <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	83 ed       	ldi	r24, 0xD3	; 211
  96:	90 e3       	ldi	r25, 0x30	; 48
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
			_delay_ms(DEBOUNCE_DELAY);
			//Second check due to switch bouncing
			if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA0))
  a0:	c8 99       	sbic	0x19, 0	; 25
  a2:	03 c0       	rjmp	.+6      	; 0xaa <main+0x3e>
			{
				//Increment LED number if it is not 7 and set to 7 if 7
				(led==7)?led=7:led++;
  a4:	37 30       	cpi	r19, 0x07	; 7
  a6:	09 f0       	breq	.+2      	; 0xaa <main+0x3e>
  a8:	3f 5f       	subi	r19, 0xFF	; 255
			}
			//Hold until button is not pressed
			while(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA0)){}
  aa:	c8 9b       	sbis	0x19, 0	; 25
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x3e>
  ae:	5a c0       	rjmp	.+180    	; 0x164 <main+0xf8>

		}else if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA1)){
  b0:	c9 99       	sbic	0x19, 1	; 25
  b2:	0d c0       	rjmp	.+26     	; 0xce <main+0x62>
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x4c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x52>
  be:	00 00       	nop
			_delay_ms(DEBOUNCE_DELAY);
			//Second check due to switch bouncing
			if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA1))
  c0:	c9 99       	sbic	0x19, 1	; 25
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x5c>
			{
				//Decrement LED number if it is not 0 and set to 0 if 0
				(led==0)?led=0:led--;
  c4:	31 11       	cpse	r19, r1
  c6:	31 50       	subi	r19, 0x01	; 1
			}
			//Hold until button is not pressed
			while(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA1)){}
  c8:	c9 9b       	sbis	0x19, 1	; 25
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x5c>
  cc:	4b c0       	rjmp	.+150    	; 0x164 <main+0xf8>

		}else if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA2)){
  ce:	ca 99       	sbic	0x19, 2	; 25
  d0:	0e c0       	rjmp	.+28     	; 0xee <main+0x82>
  d2:	83 ed       	ldi	r24, 0xD3	; 211
  d4:	90 e3       	ldi	r25, 0x30	; 48
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x6a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x70>
  dc:	00 00       	nop
			_delay_ms(DEBOUNCE_DELAY);
			//Second check due to switch bouncing
			if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA2))
  de:	ca 99       	sbic	0x19, 2	; 25
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <main+0x7c>
			{
				//Increment blinks number if it is not 9 and set to 9 if 9
				(blinks==9)?blinks=9:blinks++;
  e2:	49 30       	cpi	r20, 0x09	; 9
  e4:	09 f0       	breq	.+2      	; 0xe8 <main+0x7c>
  e6:	4f 5f       	subi	r20, 0xFF	; 255
			}
			//Hold until button is not pressed
			while(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA2)){}
  e8:	ca 9b       	sbis	0x19, 2	; 25
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <main+0x7c>
  ec:	3b c0       	rjmp	.+118    	; 0x164 <main+0xf8>

		}else if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA3)){
  ee:	cb 99       	sbic	0x19, 3	; 25
  f0:	0d c0       	rjmp	.+26     	; 0x10c <main+0xa0>
  f2:	83 ed       	ldi	r24, 0xD3	; 211
  f4:	90 e3       	ldi	r25, 0x30	; 48
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x8a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x90>
  fc:	00 00       	nop
			_delay_ms(DEBOUNCE_DELAY);
			//Second check due to switch bouncing
			if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA3))
  fe:	cb 99       	sbic	0x19, 3	; 25
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x9a>
			{
				//Decrement blinks number if it is not 0 and set to 0 if 0
				(blinks==0)?blinks=0:blinks--;
 102:	41 11       	cpse	r20, r1
 104:	41 50       	subi	r20, 0x01	; 1
			}
			//Hold until button is not pressed
			while(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA3)){}
 106:	cb 9b       	sbis	0x19, 3	; 25
 108:	fe cf       	rjmp	.-4      	; 0x106 <main+0x9a>
 10a:	2c c0       	rjmp	.+88     	; 0x164 <main+0xf8>

		}else if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA4)){
 10c:	cc 99       	sbic	0x19, 4	; 25
 10e:	2a c0       	rjmp	.+84     	; 0x164 <main+0xf8>
 110:	83 ed       	ldi	r24, 0xD3	; 211
 112:	90 e3       	ldi	r25, 0x30	; 48
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0xa8>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0xae>
 11a:	00 00       	nop
			_delay_ms(DEBOUNCE_DELAY);
			//Second check due to switch bouncing
			if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA4))
 11c:	cc 99       	sbic	0x19, 4	; 25
 11e:	20 c0       	rjmp	.+64     	; 0x160 <main+0xf4>
			{
				//Loop to toggle led according to blinks
				for(i=0;i<2*blinks;i++){
 120:	e4 2f       	mov	r30, r20
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	1e 16       	cp	r1, r30
 12a:	1f 06       	cpc	r1, r31
 12c:	cc f4       	brge	.+50     	; 0x160 <main+0xf4>
					LED_CTRL_PORT_OUT ^= (1<<led); // Toggle LED
 12e:	25 2f       	mov	r18, r21
 130:	03 2e       	mov	r0, r19
 132:	01 c0       	rjmp	.+2      	; 0x136 <main+0xca>
 134:	22 0f       	add	r18, r18
 136:	0a 94       	dec	r0
 138:	ea f7       	brpl	.-6      	; 0x134 <main+0xc8>
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	82 27       	eor	r24, r18
 140:	88 bb       	out	0x18, r24	; 24
 142:	6f e9       	ldi	r22, 0x9F	; 159
 144:	76 e8       	ldi	r23, 0x86	; 134
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	61 50       	subi	r22, 0x01	; 1
 14a:	70 40       	sbci	r23, 0x00	; 0
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xdc>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xe6>
 152:	00 00       	nop
			_delay_ms(DEBOUNCE_DELAY);
			//Second check due to switch bouncing
			if(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA4))
			{
				//Loop to toggle led according to blinks
				for(i=0;i<2*blinks;i++){
 154:	9f 5f       	subi	r25, 0xFF	; 255
 156:	69 2f       	mov	r22, r25
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	6e 17       	cp	r22, r30
 15c:	7f 07       	cpc	r23, r31
 15e:	74 f3       	brlt	.-36     	; 0x13c <main+0xd0>
					LED_CTRL_PORT_OUT ^= (1<<led); // Toggle LED
					_delay_ms(TOGGLE_DELAY);
				}
			}
			//Hold until button is not pressed
			while(BIT_IS_CLEAR(BUTTON_CTRL_PORT_IN,PA4)){}
 160:	cc 9b       	sbis	0x19, 4	; 25
 162:	fe cf       	rjmp	.-4      	; 0x160 <main+0xf4>

		}
		SEG_CTRL_PORT_OUT = (SEG_CTRL_PORT_OUT & 0xF0) | (led & 0x0F);
 164:	85 b3       	in	r24, 0x15	; 21
 166:	80 7f       	andi	r24, 0xF0	; 240
 168:	93 2f       	mov	r25, r19
 16a:	9f 70       	andi	r25, 0x0F	; 15
 16c:	89 2b       	or	r24, r25
 16e:	85 bb       	out	0x15, r24	; 21
		SEG_CTRL_PORT_OUT = (SEG_CTRL_PORT_OUT & 0x0F) | ((blinks & 0x0F)<<4);
 170:	85 b3       	in	r24, 0x15	; 21
 172:	28 2f       	mov	r18, r24
 174:	2f 70       	andi	r18, 0x0F	; 15
 176:	60 e1       	ldi	r22, 0x10	; 16
 178:	46 9f       	mul	r20, r22
 17a:	c0 01       	movw	r24, r0
 17c:	11 24       	eor	r1, r1
 17e:	82 2b       	or	r24, r18
 180:	85 bb       	out	0x15, r24	; 21

	}
 182:	86 cf       	rjmp	.-244    	; 0x90 <main+0x24>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
